# -*- coding: utf-8 -*-
"""LogisticRegression_IoTtelemetrydata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VON18tgCC6Hq4qzMGzqxXCkcksHcpdB9

#Logistic Regression Program
Author: Diya U Pradeep
"""

# Importing the libraries 
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd
import matplotlib

"""## load file"""

# Importing the dataset
dataset = pd.read_csv('/content/iot_telemetry_data.csv') 
dataset = dataset.iloc[:1000]

print(dataset.shape)

print(dataset.info())

"""##Understanding the data"""

print(dataset.head())
print(dataset.describe())
print(dataset.info())

"""## Selecting class labels, and featureset"""

X = dataset.drop(columns='ts')
X = X.drop(columns='device')
X_co= dataset['co']
X_humidity= dataset['humidity']
X_lpg= dataset['lpg']
X_smoke= dataset['smoke']
X_temp= dataset['temp']

print(X.head(), '\n')
print(X_co.head(), '\n')
print(X_humidity.head(),'\n')
print(X_lpg.head(),'\n')
print(X_smoke.head(),'\n')
print(X_temp.head())


y = dataset['device']
print(y.head())

"""## Understanding the dataset"""

import seaborn as sns
# Visualising the relationship between co,humidity and device
sns.swarmplot(x="device", y="co", data=dataset)
plt.show()
sns.swarmplot(x="device", y="humidity", data=dataset)
plt.show()


#https://stackoverflow.com/questions/47006268/matplotlib-scatter-plot-with-color-label-and-legend-specified-by-c-option

import seaborn as sns
# Visualising the relationship between lpg,smoke,temp and device
sns.swarmplot(x="device", y="lpg", data=dataset)
plt.show()
sns.swarmplot(x="device", y="smoke", data=dataset)
plt.show()
sns.swarmplot(x="device", y="temp", data=dataset)
plt.show()

#number of samples in each classes
from collections import Counter
counter = Counter(y)
print(counter)

"""## Creating Logistic Reg. model and visualizing


"""

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

le = preprocessing.LabelEncoder()
y_le = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_le, 
                                                    test_size=0.3, random_state=0)

X_train = np.reshape(X_train.values, (-1,5))
X_test = np.reshape(X_test.values, (-1,5))

plt.scatter(X_train, y_train, c='g', marker=matplotlib.markers.CARETUP)
plt.scatter(X_test, y_test, c='b', marker=matplotlib.markers.CARETDOWN)
plt.title('co and device') 
plt.xlabel('co')
plt.ylabel('device')
plt.ylim(-1,4)
plt.show()


logreg = LogisticRegression()
logreg.fit(X_train, y_train)

"""## Evaluate the performance of our model - Confusion Matrix"""

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)

report = classification_report(y_test, y_pred)
print(report)

# Visualising the results
plt.scatter(X_test, y_test, c=y_test, marker=matplotlib.markers.CARETDOWN ) 
plt.title('Smoke and Device Class (TEST SET)') 
plt.xlabel('Smoke')
plt.ylabel('Device Class')
plt.ylim(-1,4)
plt.show()

# Visualising the results
plt.scatter(X_test, y_test, c=y_pred, marker=matplotlib.markers.CARETDOWN ) 
plt.title('Smoke and Device Class (PREDICTION SET)') 
plt.xlabel('Smoke')
plt.ylabel('Device Class')
plt.ylim(-1,4)
plt.show()