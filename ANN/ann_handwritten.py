# -*- coding: utf-8 -*-
"""ann_handwritten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LWTDuekA0TxlhEsC6vOOOEpCrgGKC7Si

#ANN HANDWRITTEN-MNIST DATASET CLASSIFICAION
Author:Diya U Pradeep

https://becominghuman.ai/simple-neural-network-on-mnist-handwritten-digit-dataset-61e47702ed25
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.layers import Dense, Flatten
from keras.models import Sequential
from keras.utils import to_categorical
from keras.datasets import mnist

# Load MNIST handwritten digit data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

print(X_train.shape)
print(X_test.shape)

print(y_train.shape)
print(y_test.shape)

# Display some images
fig, axes = plt.subplots(ncols=5, sharex=False, 
    sharey=True, figsize=(10, 4))
for i in range(5):
    axes[i].set_title(y_train[i])
    axes[i].imshow(X_train[i], cmap='gray')
    axes[i].get_xaxis().set_visible(False)
    axes[i].get_yaxis().set_visible(False)
plt.show()

to_categorical(3, num_classes=10)

# Convert y_train into one-hot format
temp = []
for i in range(len(y_train)):
   temp.append(to_categorical(y_train[i], num_classes=10))
y_train = np.array(temp)
# Convert y_test into one-hot format
temp = []
for i in range(len(y_test)):    
    temp.append(to_categorical(y_test[i], num_classes=10))
y_test = np.array(temp)

print(y_train.shape)
print(y_test.shape)

# Create simple Neural Network model
model = Sequential()
model.add(Flatten(input_shape=(28,28)))
model.add(Dense(5, activation='sigmoid'))
model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy', 
              optimizer='adam',
              metrics=['acc'])

model.fit(X_train, y_train, epochs=50, 
          validation_data=(X_test,y_test))

predictions = model.predict(X_test)
print(predictions)

predictions = np.argmax(predictions, axis=1)
print(predictions)



fig, axes = plt.subplots(ncols=10, sharex=False,
                         sharey=True, figsize=(20, 4))
for i in range(10):
    axes[i].set_title(predictions[i])
    axes[i].imshow(X_test[i], cmap='gray')
    axes[i].get_xaxis().set_visible(False)
    axes[i].get_yaxis().set_visible(False)
plt.show()

"""#save model

"""

# save model and architecture to single file
model.save("model.h5")
print("Saved model to disk")

"""#load model"""

#preprocessing test_image
import cv2 
import matplotlib.pyplot as plt

# Load sample image
file5 = r'/content/2.jpeg'
test_image5 = cv2.imread(file5, cv2.IMREAD_GRAYSCALE)

# Preview sample image
plt.imshow(test_image5, cmap='gray')

# Format Image
img_resized5 = cv2.resize(test_image5, (28, 28), interpolation=cv2.INTER_LINEAR)
img_resized5 = cv2.bitwise_not(img_resized5)

# Preview reformatted image
plt.imshow(img_resized5, cmap='gray')

#preprocessing test_image
import cv2 
import matplotlib.pyplot as plt

# Load sample image
file3 = r'/content/8.jpeg'
test_image3 = cv2.imread(file3, cv2.IMREAD_GRAYSCALE)

# Preview sample image
plt.imshow(test_image3, cmap='gray')

# Format Image
img_resized3 = cv2.resize(test_image3, (28, 28), interpolation=cv2.INTER_LINEAR)
img_resized3 = cv2.bitwise_not(img_resized3)

# Preview reformatted image
plt.imshow(img_resized3, cmap='gray')

img_resized2 = img_resized5.reshape(1, 28, 28)

img_resized8 = img_resized3.reshape(1, 28, 28)

from keras.models import load_model
# load model
model = load_model('model.h5')
# summarize model.
model.summary()

predictions = model.predict(img_resized5)
print(predictions)

predictions = np.argmax(predictions, axis=1)
print(predictions)

fig, axes = plt.subplots(ncols=2, sharex=False,
                         sharey=True, figsize=(20, 4))
for i in range(1):
    axes[i].set_title(predictions[i])
    axes[i].imshow(img_resized5[i], cmap='gray')
    axes[i].get_xaxis().set_visible(False)
    axes[i].get_yaxis().set_visible(False)
plt.show()