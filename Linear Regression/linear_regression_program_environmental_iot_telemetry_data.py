# -*- coding: utf-8 -*-
"""Linear Regression Program -Environmental- IoT_Telemetry_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CXAtz4N5N6iZNZVc-vqoonR4OxFjGppk

#ML Assignment 1
Linear Regression Program -Environmental- IoT_Telemetry_data;
Author: Diya U Pradeep
"""

# Importing the libraries 
import numpy as np
import matplotlib.pyplot as plt 
import pandas as pd

"""## load file"""

# Importing the dataset
dataset = pd.read_csv('/content/iot_telemetry_data.csv') 
print(dataset)
X = dataset['lpg']
y = dataset['smoke']
#print(X)
#print(y)

len(dataset. index)

"""## Reshaping"""

print(X.shape)
print(y.shape)
X = np.reshape(X.to_numpy(),(-1,1))
y = np.reshape(y.to_numpy(),(-1,1))
print(X.shape)
print(y.shape)

"""## Visualizing the dataset"""

# Visualising the dataset results
plt.scatter(X, y, color = 'red') 
plt.title('lpg vs smoke (dataset)') 
plt.xlabel('lpg')
plt.ylabel('smoke')
plt.show()

"""## Creating Linear Reg. model and visualizing


"""

# Fitting Simple Linear Regression to the dataset 
from sklearn.linear_model import LinearRegression 
regressor_1 = LinearRegression()
regressor_1.fit(X, y)

# Visualising the trained model
plt.scatter(X, y, color = 'red') 
plt.plot(X, regressor_1.predict(X), color = 'blue') 
plt.title('Lpg vs Smoke (dataset)') 
plt.xlabel('lpg')
plt.ylabel('smoke')
plt.show()

"""But how do we test our model?

## Train Test Split
"""

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

print(X_train.shape)
print(X_test.shape)

# Visualising the train and test dataset results
plt.scatter(X_train, y_train, color = 'red')
plt.scatter(X_test, y_test, color = 'blue') 
plt.title('Lpg vs Smoke (dataset)') 
plt.xlabel('lpg')
plt.ylabel('smoke')
plt.show()

"""## Train using training split"""

regressor_2 = LinearRegression()
regressor_2.fit(X_train, y_train)

y_pred = regressor_2.predict(X_test)

# Visualising the train and test dataset results
plt.scatter(X_train, y_train, color = 'red')
plt.scatter(X_train, regressor_2.predict(X_train), color='cyan')
#plt.plot(X_test, y_pred, color='grey') 
#plt.scatter(X_test, y_test, color = 'blue') 
plt.title('lpg vs smoke (dataset)') 
plt.xlabel('lpg')
plt.ylabel('smoke')
plt.show()

"""Plot y_test and y_pred"""

# Visualising the y_test and y_pred results
plt.scatter(X_test, y_test, color = 'blue') #true 
plt.scatter(X_test, y_pred, color = 'green')
plt.plot(X_test, y_pred, color='grey') 
plt.title('lpg vs smoke (dataset)') 
plt.xlabel('lpg')
plt.ylabel('smoke')
plt.show()

"""## Evaluate the performance of our model - MSE and MAE"""

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

print('MAE', mean_absolute_error(y_train, regressor_2.predict(X_train)))
#print('MAE', mean_absolute_error(y_test, y_pred))
print('MAE', mean_absolute_error(y_test, regressor_2.predict(X_test)))

from sklearn.metrics import mean_absolute_percentage_error

print('MAPE',mean_absolute_percentage_error(y_train,regressor_2.predict(X_train)))
#print('MAPE',mean_absolute_percentage_error(y_test, y_pred))
print('MAPE',mean_absolute_percentage_error(y_test,regressor_2.predict(X_test)))